#!@PYTHON_EXECUTABLE@
# -*- coding: utf-8 -*-

__version__ = "$Revision: 0.1 $"[11:-2]
__date__ = "$Date: 2008/03/21 08:09:13 $"[7:-2]
__author__ = "Tomeu Borras <tborras@conetxia.com>"
__all__ = ["bulmasetup"]
__doc__ = "Sistema de instalacion y mantenimiento de Bases de Datos para BulmaGes.\r\n"

import os
import commands
import sys

if os.name == 'posix':
    sys.path.append('@CMAKE_INSTALL_PREFIX@/share/bulmages/bulmasetup')
else:
    sys.path.append(os.getcwd().replace("bulmasetup","share\\bulmages\\bulmasetup"))


from config import *
from bulmasetupbase import *
from PyQt4 import *
from nuevousuario import NuevoUsuario
from eliminarusuario import EliminarUsuario
from eliminarempresa import EliminarEmpresa
from editarusuario import EditarUsuario
from modificarusuario import ModificarUsuario
from nuevafacturacion import NuevaFacturacion
from nuevacontabilidad import NuevaContabilidad
from listempresas import ListEmpresas
from restbackup   import RestBackup
from guardarbackup import GuardarBackup
from about import About


class HelloWindow(QtGui.QMainWindow, Ui_MainWindow, PluginsBulmaSetup):
    def __init__(self, *args):
        apply(QtGui.QMainWindow.__init__, (self,) + args)
        self.setupUi(self)

        # Detecta si hemos accedido como 'root' o no y deshabilita las opciones que necesitan esos permisos.
        if os.name == 'posix':
            if commands.getstatusoutput("whoami")[1] == 'root':
                self.nuevo_usuario.setEnabled(True)
                self.editar_usuario.setEnabled(True)
                self.eliminar_usuario.setEnabled(True)
                self.permisos_usuario.setEnabled(True)
                self.mui_crearbulmafact.setEnabled(True)
                self.eliminar_empresa.setEnabled(True)
                self.mui_adminempresas.setEnabled(True)
                self.mui_restbackup.setEnabled(True)
                self.mui_creabackup.setEnabled(True)
        else:
            self.nuevo_usuario.setEnabled(True)
            self.editar_usuario.setEnabled(True)
            self.eliminar_usuario.setEnabled(True)
            self.permisos_usuario.setEnabled(True)
            self.mui_crearbulmafact.setEnabled(True)
            self.eliminar_empresa.setEnabled(True)
            self.mui_adminempresas.setEnabled(True)
            self.mui_restbackup.setEnabled(True)
            self.mui_creabackup.setEnabled(True)
                
                
        # Evento al hacer clic en el Boton para crear un nuevo usuario
    def on_nuevo_usuario_released(self):
        win = NuevoUsuario()
        win.exec_()

        # Evento al hacer clic en el Boton para crear un nuevo usuario
    def on_editar_usuario_released(self):
        win = EditarUsuario()
        win.exec_()

        # Evento al hacer clic en el Boton para crear un nuevo usuario
    def on_eliminar_usuario_released(self):
        win = EliminarUsuario()
        win.exec_()

        # Evento al hacer clic en el Boton para crear un nuevo usuario
    def on_permisos_usuario_released(self):
        win = ModificarUsuario()
        win.exec_()

        # Evento al hacer clic en el Boton para crear nueva Empresa de Facturacion
    def on_mui_crearbulmafact_released(self):
        win = NuevaFacturacion()
        win.exec_()

        # Evento al hacer clck en el Boton para eliminar Empresas
    def on_eliminar_empresa_released(self):
        win = EliminarEmpresa()
        win.exec_()

        # Evento al hacer clic en el Boton para Administrar una Empresa ya existente
    def on_mui_adminempresas_released(self):
        win = ListEmpresas()
        win.exec_()

        # Evento al hacer clic en el Boton para restaurar Copia de Seguridad
    def on_mui_restbackup_released(self):
        win = RestBackup()
        win.exec_()

        # Evento al hacer clic en el Boton para crear Copia de Seguridad
    def on_mui_creabackup_released(self):
        win = GuardarBackup()
        win.exec_()


        # Evento al hacer clic en el Boton Acerca de BulmaSetup
    def on_mui_acerca_released(self):
        win = About()
        win.exec_()

def main(args):
    app=QtGui.QApplication(args)

    locale = QtCore.QLocale()
    country = str(locale.name().left(2))


    translator = QtCore.QTranslator()
    translator.load("@CMAKE_INSTALL_PREFIX@/share/bulmages/bulmasetup/bulmasetup_"+country+".qm")
    app.installTranslator(translator)


    win=HelloWindow()
    win.show()
    # Envio de se√±al para cerrar la ventana principal de BulmaSetup
    app.connect(app, QtCore.SIGNAL("lastWindowClosed()"),
                app, QtCore.SLOT("quit()"))
    app.exec_()

if __name__=="__main__":
    main(sys.argv)
