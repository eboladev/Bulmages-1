# -*- coding: utf-8 -*-

import sys
import os
from config import *
from PyQt4 import QtCore, QtGui
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from plugins import PluginsBulmaSetup
import plugins
from facturacion import Facturacion
from modificarusuario import ModificarUsuario
import functions

class ModificarFacturacion( Facturacion):
    def __init__(self, database, parent = None):
        Facturacion.__init__(self, database, parent)
        # Establecemos cual va a ser la base de datos con la que trabajaremos y conectamos con ella
        self.conectar(self.database)
        # Sacamos el nombre de la empresa y el numero de revision de la base de datos
        self.nombre = self.executeone('SELECT valor FROM configuracion where nombre =\'NombreEmpresa\'')
        self.databaserevision = self.executeone('SELECT valor FROM configuracion where nombre =\'DatabaseRevision\'')
        # Comprobamos la existencia de la parte de TPV
        self.tpvexists = self.executeone('SELECT valor FROM configuracion WHERE nombre = \'DBRev-BulmaTPV\'')
        # Desconectamos
        self.desconectar()
        # Rellenamos las campos con los datos obtenido en las consultas anteriores
        self.mui_nomdb.setText(self.database)
        self.mui_nomempresa.setText(self.nombre[0])
        self.mui_databaserevision.setText(self.databaserevision[0])
        if (self.tpvexists != None):
            if (len(self.tpvexists[0]) > 3):
                self.mui_soporteTPV.setCheckState(Qt.Checked)
            else:
                self.mui_soporteTPV.setCheckState(Qt.Unchecked)

    def on_mui_hacerbackup_released(self):
        # Ponemos la pestanya de consola como la visible
        self.tabWidget.setCurrentIndex(2)

        self.mui_textBrowser.clear()

        self.writecommand("===== Backup =====<br>")
        self.command = functions.pg_dump + ' -f ' + plugins.configfiles + self.database + '.sql ' + self.database
        self.proceso.start(self.command)
        self.proceso.waitForFinished(-1)
        #functions.pg_dump + ' -f ' + plugins.configfiles + self.database + '.sql ' + self.database

        self.directorio = QFileDialog.getExistingDirectory(self, "Selecciona la carpeta de destino del Backup",plugins.homedir)

        self.conffact = 'bulmafact_' + self.database + '.conf'
        self.conftpv = 'bulmatpv_' + self.database + '.conf'
        self.quehehecho = 0

        if os.path.exists(plugins.configfiles + self.conffact):
            self.writecommand('Buscando archivo de configuracion: ' + plugins.configfiles + self.conffact + '<br>')
            self.quehehecho = 1
        else:
            self.writecommand('<font color =\"#FF0000\">No existe el archivo de configuracion: ' + plugins.configfiles + self.conffact + '</font>')
        if os.path.exists(plugins.configfiles + self.conftpv):
            self.writecommand('Buscando archivo de configuracion: ' + plugins.configfiles + self.conftpv + '<br>')
            self.quehehecho = 2

        if self.quehehecho == 1:
            self.writecommand('Empaquetando archivos de configuracion y datos de la BD<br>')
            files=[plugins.configfiles + self.conffact, plugins.configfiles + self.database + '.sql']
            destination=self.directorio + '/' + self.database + '.tar.gz'
            functions.multios().compress(files,destination)
        if self.quehehecho == 2:
            self.writecommand('Empaquetando archivos de configuracion y datos de la BD<br>')
            files=[plugins.configfiles + self.conffact, plugins.configfiles + self.conftpv, plugins.configfiles + self.database + '.sql']
            destination=self.directorio + '/' + self.database + '.tar.gz'
            functions.multios().compress(files,destination)

        self.writecommand("===== Backup Guardado Satisfactoriamente En : " + self.directorio + " =====<br><br>")

        os.remove(str(plugins.configfiles + self.database + '.sql'))
        self.writecommand('Eliminando archivos temporales')

    def on_mui_aceptar_released(self):
        # Ponemos la pestanya de consola como la visible
        self.tabWidget.setCurrentIndex(3)
        self.mui_textBrowser.clear()
        if (self.mui_actualizarDB.checkState() == Qt.Checked ):
            self.actualizarDatabase()

        # Aplicamos el parche de bulmatpv si es necesario
        if (self.mui_soporteTPV.isChecked()):
            #self.command = functions.psql +' ' + self.database + ' < '+ plugins.pathdbbulmatpv+'bulmatpv_schema.sql' + functions.end_sql
            self.command = functions.psql + ' -t -f ' + functions.multios().correctFileName(plugins.pathdbbulmatpv+'bulmatpv_schema.sql') + ' ' + self.database + functions.end_sql
            self.writecommand(self.command)
            self.process.start(self.command)
            self.process.waitForFinished(-1)


        self.actualizarPlugins()
        self.writeConfig()
        # Escribimos el mensaje de finalizacion de la actualizacion para que queda constancia de ello.
        self.writecommand(" === Finalizado === ")

    def on_mui_permisos_released(self):
        win = ModificarUsuario()
        win.exec_()

def main(args):
    app=QtGui.QApplication(args)
    win=ModificarFacturacion('bulmafact')
    win.exec_()
    sys.exit(app.exec_())

if __name__=="__main__":
    main(sys.argv)
