# -*- coding: utf-8 -*-

import sys
import os
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from restbackupbase import *
import functions
import plugins
import string

class RestBackup(QtGui.QDialog, Ui_RestBackupBase):
    def __init__(self, parent = None):
        QtGui.QDialog.__init__(self,parent)
        self.setupUi(self)
        self.proceso = QtCore.QProcess()

    def on_mui_aceptar_released(self):
        functions.multios().decompress( str(self.mui_filename.text()), plugins.configfiles)
        self.nomdb = self.mui_dbname.text()
	self.database = str(self.mui_filename.text().replace(".tar.gz",""))
	self.database = os.path.basename(self.database)

        # Verificamos el nombre de la base de datos
        if (self.nomdb == None or self.nomdb == 'postgres' or self.nomdb == 'template0' or self.nomdb == 'template1' or self.nomdb == ''):
            print "Nombre de la base de datos incorrecto"
            message = QtGui.QMessageBox(self)
            message.setText(QtGui.QApplication.translate("NuevaFacturacion", "Debe proporcionar un nombre a la base de datos que va a crearse", None, QtGui.QApplication.UnicodeUTF8))
            message.setWindowTitle('Atencion!')
            message.setIcon(QtGui.QMessageBox.Warning)
            message.addButton('Cerrar', QtGui.QMessageBox.AcceptRole)
            message.exec_()
            return

        # Creamos la base de datos
        self.command = functions.createdb + self.nomdb + functions.end_sql
        self.proceso.start(self.command)
        self.proceso.waitForFinished(-1)

        # Cargamos la esquematica de la base de datos
        if (os.path.exists( plugins.configfiles + self.database + ".sql")):
	    self.command = functions.psql + ' -f ' + functions.multios().correctFileName(plugins.configfiles + self.database + '.sql') + ' ' + self.nomdb + functions.end_sql
	    self.proceso.start(self.command)
	    self.proceso.waitForFinished(-1)
	    # Borramos el sql recien extraido en @BULMAGES_CONFIG_DIR@, ya que se conserva una copia dentro del backup
	    os.remove(str(plugins.configfiles + self.database + '.sql'))
	elif (os.path.exists (plugins.configfiles + "etc/" + self.database + ".sql")):
	    self.command = functions.psql + ' -f ' + functions.multios().correctFileName(plugins.configfiles + "etc/" +  self.database + '.sql') + ' ' + self.nomdb + functions.end_sql
	    self.proceso.start(self.command)
	    self.proceso.waitForFinished(-1)
	    # Borramos el sql recien extraido en @BULMAGES_CONFIG_DIR@, ya que se conserva una copia dentro del backup
	    os.remove(str(plugins.configfiles + "etc/" + self.database + '.sql'))
	    if (os.path.exists(plugins.configfiles + "etc/bulmafact_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmafact_" + self.database + '.conf'), plugins.configfiles + "bulmafact_" + self.database + ".conf")
	    if (os.path.exists(plugins.configfiles + "etc/bulmacont_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmacont_" + self.database + '.conf'), plugins.configfiles + "bulmacont_" + self.database + ".conf")
	    if (os.path.exists(plugins.configfiles + "etc/bulmatpv_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmatpv_" + self.database + '.conf'), plugins.configfiles + "bulmatpv_" + self.database + ".conf")
	elif (os.path.exists (plugins.configfiles + "etc/bulmages/" + self.database + ".sql")):
	    self.command = functions.psql + ' -f ' + functions.multios().correctFileName(plugins.configfiles + "etc/bulmages/" +  self.database + '.sql') + ' ' + self.nomdb + functions.end_sql
	    self.proceso.start(self.command)
	    self.proceso.waitForFinished(-1)
	    # Borramos el sql recien extraido en @BULMAGES_CONFIG_DIR@, ya que se conserva una copia dentro del backup
	    os.remove(str(plugins.configfiles + "etc/bulmages/" + self.database + '.sql'))
	    if (os.path.exists(plugins.configfiles + "etc/bulmages/bulmafact_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmages/bulmafact_" + self.database + '.conf'), plugins.configfiles + "bulmafact_" + self.database + ".conf")
	    if (os.path.exists(plugins.configfiles + "etc/bulmages/bulmacont_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmages/bulmacont_" + self.database + '.conf'), plugins.configfiles + "bulmacont_" + self.database + ".conf")
	    if (os.path.exists(plugins.configfiles + "etc/bulmages/bulmatpv_" + self.database + '.conf')):
		os.rename(str(plugins.configfiles + "etc/bulmages/bulmatpv_" + self.database + '.conf'), plugins.configfiles + "bulmatpv_" + self.database + ".conf")




        Yes = 'Ok'
        yasta = QtGui.QMessageBox(self)
        yasta.setWindowTitle('Restauracion de Backup')
        yasta.setIcon(QtGui.QMessageBox.Information)
        yasta.addButton(Yes, QtGui.QMessageBox.AcceptRole)
        yasta.setText('<b>El backup ha sido restaurado correctamente</b>')
        yasta.exec_()

        self.accept()

    def on_mui_filesearch_released(self):
        self.openfile = QFileDialog.getOpenFileName(self,"Restaurar - Elija archivo de backup", plugins.homedir,"TAR.GZ (*.tar.gz)")
        self.mui_filename.setText(self.openfile)

        self.arra = self.openfile.split('/')
        self.database = self.arra[-1]
        if self.database.contains('.tar.gz'):
            self.database.remove('.tar.gz')
        self.mui_dbname.setText(self.database)

def main(args):
    app=QtGui.QApplication(args)
    win=RestBackup()
    win.exec_()
    sys.exit(app.exec_())

if __name__=="__main__":
    main(sys.argv)
