# -*- coding: utf-8 -*-

import sys
import os
from config import *
from PyQt4 import QtCore, QtGui
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from plugins import PluginsBulmaSetup
from modificarfacturacionbase import *
from empresa import Empresa
import plugins
import functions

class Facturacion(Ui_ModificarFacturacionBase, Empresa):
    def __init__(self,database, parent = None):
        Empresa.__init__(self, database, parent)
        self.setupUi(self)
        
        self.languages = ["es","ca","fr","en"]

        # Asignamos un estado para que siempre este
        self.estado = None

        # Ocultamos la columna de las descripciones.
        self.mui_plugins.setColumnCount(13)
        self.mui_plugins1.setColumnCount(13)

        self.mui_plugins.hideColumn(1)
        self.mui_plugins1.hideColumn(1)

        self.mui_plugins.hideColumn(3)
        self.mui_plugins1.hideColumn(3)

        self.mui_plugins.hideColumn(4)
        self.mui_plugins1.hideColumn(4)

        self.mui_plugins.hideColumn(5)
        self.mui_plugins1.hideColumn(5)

        self.mui_plugins.hideColumn(6)
        self.mui_plugins1.hideColumn(6)

        self.mui_plugins.hideColumn(7)
        self.mui_plugins1.hideColumn(7)

        self.mui_plugins.hideColumn(8)
        self.mui_plugins1.hideColumn(8)

        self.mui_plugins.hideColumn(9)
        self.mui_plugins1.hideColumn(9)

        self.mui_plugins.hideColumn(10)
        self.mui_plugins1.hideColumn(10)

        self.mui_plugins.hideColumn(11)
        self.mui_plugins1.hideColumn(11)

        self.mui_plugins.hideColumn(12)
        self.mui_plugins1.hideColumn(12)

        self.mui_plugins1.setEnabled(False)

        # Desabilitamos el Sorting para que en versiones previas se rellenen bien los campos
        self.mui_plugins.setSortingEnabled(False)
        self.mui_plugins1.setSortingEnabled(False)

        # Hacemos un Show y as√≠ el padre recupera el control.
        self.show()

        self.inicializar()

        # Habilitamos el Sortin pq los campos ya estan rellenos.
        self.mui_plugins.setSortingEnabled(False)
        self.mui_plugins1.setSortingEnabled(False)

        #Comprobamos que exista la imagen y si es asi la presentamos.
        if (self.database != None):
            if (os.path.exists(plugins.openreports + 'openreports_' + self.database + 'es/logo.jpg' )):
                self.pixmap = QtGui.QPixmap(plugins.openreports + 'openreports_' + self.database + 'es/logo.jpg')
                self.mui_img.setPixmap(self.pixmap)

    def inicializar(self):
        # Ponemos la pestanya de consola como la visible
        self.tabWidget.setCurrentIndex(2)
        self.tabWidget.setCurrentIndex(0)

        # Buscamos los Plugins
        self.buscaPlugins()
        # Ajustamos la presentacion
        self.mui_plugins.resizeColumnsToContents()
        self.mui_plugins1.resizeColumnsToContents()
        self.mui_plugins.resizeRowsToContents()
        self.mui_plugins1.resizeRowsToContents()


        # Inicializamos el combo de categoria.
        self.mui_categoria.clear()
        self.i =0 ;
        self.cadcategorias = '';
        while (self.i < len(self.pluginsbulmafact)):
            self.cadcategorias = self.cadcategorias + self.pluginsbulmafact[self.i][8]
            self.i = self.i + 1
        self.i = 0
        while (self.i < len(self.pluginsbulmatpv)):
            self.cadcategorias = self.cadcategorias + self.pluginsbulmatpv[self.i][8]
            self.i = self.i + 1
        # Tratamos toda la cadena de categorias.
        self.cadcategorias = self.cadcategorias.replace('; ',';')
        self.cadcategorias = self.cadcategorias.replace(' ;',';')
        self.arra = self.cadcategorias.split(';')
        self.arra.sort()
        self.j = 1
        while (self.j < len ( self.arra)):
            if (self.j < 1 or self.arra[self.j] <> self.arra[self.j-1]):
                self.mui_categoria.addItem( self.arra[self.j].decode('string-escape').decode("utf-8"))
            self.j = self.j + 1
        self.mui_categoria.addItem(QtGui.QApplication.translate("Facturacion",'--Todas las Categorias--', None, QtGui.QApplication.UnicodeUTF8))
        #Ponemos como categoria por defecto la facturacion generica.
        indice = self.mui_categoria.findText("Facturacion generica")
        if (indice < 0):
            indice = 0
        self.mui_categoria.setCurrentIndex(indice)

        #Ponemos la pestanya de seleccion de plugins como la visible.
        self.tabWidget.setCurrentIndex(0)

    def trataOpenReports(self):
        self.writecommand(QtGui.QApplication.translate("Facturacion",'Generando plantillas RML y PYS', None, QtGui.QApplication.UnicodeUTF8))
        # Creamos el directorio especifico para guardar las plantillas y los idiomas
        
        for language in self.languages:
            functions.multios().mkdir_p(str(plugins.openreports + "openreports_%s/%s" %(self.database,language)),0755)


        i = 1
        while (os.path.exists(plugins.openreports + 'openreports_' + self.database + '_old' + str(i))):
            i = i + 1

        # Hacemos un backup de openreports
        functions.multios().copy(str(plugins.openreports + "openreports_%s" % self.database),str(plugins.openreports + "openreports_%s_old%s" % (self.database,str(i))))

        self.writecommand(QtGui.QApplication.translate("Facturacion",'Generamos backup de las plantillas de impresion en ', None, QtGui.QApplication.UnicodeUTF8) + plugins.openreports + 'openreports_' + self.database + '_old' + str(i))

        # Copiamos los archivos genericos
        # Copiamos las plantillas en cada idioma
        for language in self.languages:
            functions.multios().copy(str(plugins.confopenreports+ "%s/informereferencia.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/informereferencia.rml" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/plantilla.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/plantilla.rml" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/plantilla1.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/plantilla1.rml" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/plantilla_empresa.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/plantilla_empresa.rml" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/estilos.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/estilos.rml" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/listado.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/listado.rml" % language) )
            if (os.path.exists(plugins.confopenreports + "es/logo.jpg")):
                functions.multios().copy(str(plugins.confopenreports+ "%s/logo.jpg" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/logo.jpg" % language) )
            functions.multios().copy(str(plugins.confopenreports+ "%s/ficha.rml" % language),str(plugins.openreports + "openreports_" + self.database +"/%s/ficha.rml" % language) )
            # Pasamos el logotipo
            if (self.mui_textfile.text() != ""):
                functions.multios().copy(str(self.mui_textfile.text()),str(plugins.openreports + "openreports_" + self.database +"/%s/logo.jpg" % language) )
        # END Copiamos las plantillas en cada idioma
    

        # Iteramos sobre la lista de plugins disponibles en bulmafact para copiar sus plantillas
        self.i = 0
        while (self.i < self.mui_plugins.rowCount()):
            # Si el plugin tiene el orden adecuado lo consideramos.
            self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
            # Si el plugin esta checked lo escribimos.
            if (self.mui_plugins.item(self.i, 0).checkState() == Qt.Checked and len(self.mui_plugins.item(self.i,11).text()) > 3):

                # Si el plugin tiene archivo de autoforms lo copiamos
                if (self.mui_plugins.item(self.i, 12).text() != '' and len (self.mui_plugins.item(self.i,12).text()) > 3):
                   # Aqui spliteamos y copiamos cada archivo
                   self.cadautoforms = self.mui_plugins.item(self.i,12).text().replace('; ',';')
                   self.cadautoforms = self.cadautoforms.replace(' ;',';')
                   self.arra = self.cadautoforms.split(';')
                   self.arra.sort()
                   self.j = 1
                   while (self.j < len ( self.arra)):
                       functions.multios().copy(str(plugins.confsharebulmages + "autoforms/" + self.arra[self.j]), str(plugins.configfiles + self.arra[self.j].replace("__","_" + self.database + "_") ) )
                       self.j = self.j + 1


                # Si hay que aplicar un plugin entonces lo escribimos
                if (self.mui_plugins.item(self.i,11).text() != 'None' and len(self.mui_plugins.item(self.i,11).text()) > 3):
                # Tratamos toda la cadena de categorias.
                    self.cadreports = self.mui_plugins.item(self.i,11).text().replace('; ',';')
                    self.cadreports = self.cadreports.replace(' ;',';')
                    self.arra = self.cadreports.split(';')
                    self.arra.sort()
                    self.j = 0
                    while (self.j < len ( self.arra)):
                        # Copiamos las plantillas
                        for language in self.languages:
                            functions.multios().copy(str(plugins.confopenreports + "%s/" % language + self.arra[self.j]),str(plugins.openreports + "openreports_" + self.database +"/%s/" % language + self.arra[self.j]))
                        self.j = self.j + 1
            self.i = self.i + 1


        # Iteramos sobre la lista de plugins disponibles en bulmatpv para copiar sus plantillas
        self.i = 0
        while (self.i < self.mui_plugins1.rowCount()):
            # Si el plugin tiene el orden adecuado lo consideramos.
            self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
            # Si el plugin esta checked lo escribimos.
            if (self.mui_plugins1.item(self.i, 0).checkState() == Qt.Checked and len(self.mui_plugins1.item(self.i,11).text()) > 3):
                # Si hay que aplicar un plugin entonces lo escribimos
                if (self.mui_plugins1.item(self.i,11).text() != 'None' and len(self.mui_plugins1.item(self.i,11).text()) > 3):
                    # Tratamos toda la cadena de categorias.
                    self.cadreports = self.mui_plugins1.item(self.i,11).text().replace('; ',';')
                    self.cadreports = self.cadreports.replace(' ;',';')
                    self.arra = self.cadreports.split(';')
                    self.arra.sort()
                    self.j = 0
                    while (self.j < len ( self.arra)):
                        # Copiamos las plantillas
                        for language in self.languages:
                            functions.multios().copy(str(plugins.confopenreports + "%s/" % language + self.arra[self.j]),str(plugins.openreports + "openreports_" + self.database +"/%s/" % language + self.arra[self.j]))
                        self.j = self.j + 1
            self.i = self.i + 1

        # Hacemos un backup del archivo
        functions.multios().copy(str(plugins.configfiles + "bulmafact_" + self.database + ".conf"),str(plugins.configfiles + "bulmafact_" + self.database + ".conf~"))

        # Abrimos el backup para lectura
        self.file1 = QFile( plugins.configfiles + "bulmafact_" + self.database + ".conf~");
        if not(self.file1.open(QIODevice.ReadOnly | QIODevice.Text)):
            return;
        self.vin = QTextStream(self.file1)

        # Abrimos el archivo para escritura.
        self.file = QFile( plugins.configfiles + "bulmafact_" + self.database + ".conf");
        if not(self.file.open(QIODevice.WriteOnly | QIODevice.Text)):
            return;
        self.out = QTextStream(self.file)

        # Leemos las lineas iniciales (hasta el parametro deseado) y las ponemos de nuevo.
        self.encontradoopenreports  = 0;
        self.encontradoarticles = 0;
        self.encontradostylesheet = 0;
        locale = QtCore.QLocale()
        self.text = self.vin.readLine()
        while (not (self.text.isNull())):
            # and not(self.text.contains("CONF_DIR_OPENREPORTS")) ):
            if (self.text.contains("CONF_DIR_OPENREPORTS")):
                # Escribimos el parametro como lo deseamos
                #self.out << "\n\nCONF_DIR_OPENREPORTS "+plugins.openreports+"openreports_" + self.database +"/\n\n"
                self.encontradoopenreports = 1;

            if (self.text.contains("CONF_DIR_IMG_ARTICLES")):
                # Escribimos el parametro como lo deseamos
                #self.out << "\n\nCONF_DIR_IMG_ARTICLES "+plugins.openreports+"imgarticles_" + self.database +"/\n\n"
                self.encontradoarticles = 1;

            if (self.text.contains("CONF_STYLESHEET")):
                # Escribimos el parametro como lo deseamos
                #self.out << "\n\nCONF_DIR_IMG_ARTICLES "+plugins.openreports+"/imgarticles_" + self.database +"/\n\n"
                self.encontradostylesheet = 1;

            self.out << self.text << "\n"
            self.text = self.vin.readLine()

        if (self.encontradoopenreports == 0):
                # Escribimos el parametro como lo deseamos
            if os.name == 'posix':
                self.out << "\n\nCONF_DIR_OPENREPORTS "+plugins.openreports+"openreports_" + self.database +"/"+str(locale.name().left(2))+"/\n\n"
            else:
                self.out << "\n\nCONF_DIR_OPENREPORTS ..\\openreports\\openreports_" + self.database +"/"+str(locale.name().left(2))+"/\n\n"
        if (self.encontradostylesheet == 0):
            # Escribimos el parametro como lo deseamos
            if os.name == 'posix':
                 self.out << "\n\nCONF_STYLESHEET " + plugins.cmakeinstallprefix +"css/bulmafact_" +str(locale.name().left(5))+".css\n\n"
            else:
                 self.out << "\n\nCONF_STYLESHEET ..\\css/bulmafact_" +str(locale.name().left(5))+".css\n\n"
			
        # Cerramos los ficheros.
        self.file.close()
        self.file1.close()


    def writeConfig(self):
        self.writecommand(QtGui.QApplication.translate("Facturacion",' === ESCRIBIENDO CONFIGURACION ===', None, QtGui.QApplication.UnicodeUTF8))
        self.writecommand(QtGui.QApplication.translate("Facturacion","Escribiendo configuracion en ", None, QtGui.QApplication.UnicodeUTF8)+ plugins.configfiles + "bulmafact_" + self.database + ".conf " )


        # TRATAMOS EL ARCHIVO DE BULMAFACT
        # ================================

        # Tocamos el archivo por si no existe
        BulmafactConf = plugins.configfiles + "bulmafact_" + self.database + ".conf"
        functions.multios().touch(BulmafactConf)

        # Creamos el directorio especifico para guardar las imagenes
        functions.multios().mkdir_p(str(plugins.openreports + "imgarticles_" + self.database), 0777)


        # Hacemos un backup del archivo
        functions.multios().copy(str(plugins.configfiles + "bulmafact_" + self.database + ".conf"),str(plugins.configfiles + "bulmafact_" + self.database + ".conf~") )

        # Abrimos el backup para lectura
        self.file1 = QFile( plugins.configfiles + "bulmafact_" + self.database + ".conf~");
        if not(self.file1.open(QIODevice.ReadOnly | QIODevice.Text)):
            return;
        self.vin = QTextStream(self.file1)

        # Abrimos el archivo para escritura.
        self.file = QFile( plugins.configfiles + "bulmafact_" + self.database + ".conf");
        if not(self.file.open(QIODevice.WriteOnly | QIODevice.Text)):
            return;
        self.out = QTextStream(self.file)

        # Leemos las lineas iniciales (hasta el parametro deseado) y las ponemos de nuevo.
        self.text = self.vin.readLine()
        while (not (self.text.isNull()) and not(self.text.contains("CONF_PLUGINS_BULMAFACT")) ):
            self.out << self.text << "\n"
            self.text = self.vin.readLine()

        # Quitamos todo lo que es el parametro porque no debe estar
        while (not (self.text.isNull()) and self.text.contains("lib")):
            self.text = self.vin.readLine()

        self.nuevo = 1

        # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
        self.x = 1
        while (self.x < 1000) :
            # Iteramos sobre la lista de plugins disponibles en bulmafact
            self.i = 0
            while (self.i < self.mui_plugins.rowCount()):
            # Si el plugin tiene el orden adecuado lo consideramos.
                if (str(self.mui_plugins.item(self.i,7).text()) == str(self.x) ):
                    self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
                    # Si el plugin esta checked lo escribimos.
                    if (self.mui_plugins.item(self.i, 0).checkState() == Qt.Checked and len(self.mui_plugins.item(self.i,10).text()) > 3):
                        if (self.nuevo == 1):
                            self.nuevo = 0
                            # Escribimos la configuracion de plugins.
                            self.terminador = ""
                            self.out << "CONF_PLUGINS_BULMAFACT   "
                        # Si hay que aplicar un plugin entonces lo escribimos
                        if (self.mui_plugins.item(self.i,10).text() != 'None' and len(self.mui_plugins.item(self.i,10).text()) > 3 and self.mui_plugins.item(self.i,10).text().contains(".so")):
                            self.writecommand(QtGui.QApplication.translate("Facturacion",'Hay que actualizar ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
                            if os.name == 'posix':
                                self.out << self.terminador << self.mui_plugins.item(self.i,10).text()
                            else:
                                self.out << self.terminador << self.mui_plugins.item(self.i,10).text().replace(".so",".dll")
                            self.terminador = "; \\\n";
                self.i = self.i + 1
            self.x = self.x + 1
        self.out << "\n"

        # Terminamos de poner el resto de las linea.
        while (not (self.text.isNull()) ):
            self.out << self.text << "\n"
            self.text = self.vin.readLine()

        # Cerramos slo ficheros.
        self.file.close()
        self.file1.close()

        # TRATAMOS EL ARCHIVO DEL BULMATPV
        # ================================

        if (self.mui_soporteTPV.isChecked()):

            # Tocamos el archivo por si no existe
            Bulmatpvconf = plugins.configfiles + "bulmatpv_" + self.database + ".conf"
            functions.multios().touch(Bulmatpvconf)

            # Hacemos un backup del archivo
            functions.multios().copy(str(plugins.configfiles + "bulmatpv_" + self.database + ".conf"),str(plugins.configfiles + "bulmatpv_" + self.database + ".conf~") )

            # Abrimos el backup para lectura
            self.file1 = QFile( plugins.configfiles + "bulmatpv_" + self.database + ".conf~");
            if not(self.file1.open(QIODevice.ReadOnly | QIODevice.Text)):
                return;
            self.vin = QTextStream(self.file1)

            self.file = QFile( plugins.configfiles + "bulmatpv_" + self.database + ".conf");
            if not(self.file.open(QIODevice.WriteOnly | QIODevice.Text)):
                return;
            self.out = QTextStream(self.file)

            # Leemos las lineas iniciales (hasta el parametro deseado) y las ponemos de nuevo.
            self.text = self.vin.readLine()
            while (not (self.text.isNull()) and not(self.text.contains("CONF_PLUGINS_BULMATPV")) ):
                self.out << self.text << "\n"
                self.text = self.vin.readLine()

            # Quitamos todo lo que es el parametro porque no debe estar
            while (not (self.text.isNull()) and self.text.contains("lib")):
                self.text = self.vin.readLine()

        # Escribimos la configuracion de plugins.
            self.terminador = ""

            self.nuevo = 1
            # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
            self.x = 1
            while (self.x < 1000) :
                self.i = 0
                while (self.i < self.mui_plugins1.rowCount()):
                    if ( str(self.mui_plugins1.item(self.i,7).text()) == str(self.x)):
                        self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                        if (self.mui_plugins1.item(self.i, 0).checkState() == Qt.Checked and len (self.mui_plugins1.item (self.i, 10).text()) > 3):
                            if (self.nuevo == 1):
                                self.nuevo = 0
                                self.out << "CONF_PLUGINS_BULMATPV   "
                            self.writecommand(QtGui.QApplication.translate("Facturacion",'Hay que actualizar ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                            # Si hay que aplicar un plugin entonces lo escribimos
                            if (self.mui_plugins1.item(self.i,10).text() != 'None' and len(self.mui_plugins1.item(self.i,10).text()) > 3 and self.mui_plugins.item(self.i,10).text().contains(".so")):
                                self.writecommand(QtGui.QApplication.translate("Facturacion",'Hay que actualizar ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                                if os.name == 'posix':
                                    self.out << self.terminador << self.mui_plugins1.item(self.i,10).text()
                                else:
                                    self.out << self.terminador << self.mui_plugins1.item(self.i,10).text().replace(".so",".dll")
                                self.terminador = "; \\\n";
                    self.i = self.i + 1
                self.x = self.x + 1
            self.out << "\n"

            # Leemos las lineas iniciales (hasta el parametro deseado) y las ponemos de nuevo.
            self.encontradoarticles = 0;
            self.text = self.vin.readLine()


            if (self.encontradoarticles == 0):
                    # Escribimos el parametro como lo deseamos
                if os.name == 'posix':
					self.out << "\n\nCONF_DIR_THUMB_ARTICLES "+plugins.openreports+"imgarticles_" + self.database +"/\n\n"
					self.out << "\n\nCONF_DIR_IMG_ARTICLES "+plugins.openreports+"imgarticles_" + self.database +"/\n\n"
                else:
					self.out << "\n\nCONF_DIR_THUMB_ARTICLES ..\\openreports\\imgarticles_" + self.database +"/\n\n"
					self.out << "\n\nCONF_DIR_IMG_ARTICLES ..\\openreports\\imgarticles_" + self.database +"/\n\n"




            self.file.close()
            self.file1.close()
        self.trataOpenReports()

    def marcar(self, plug, rec, first = 0):
        i = 0
        if plug !="":
            while (i < self.mui_plugins1.rowCount()):
                if (self.mui_plugins1.item(i,10).text() == plug):
                    if (self.mui_plugins1.item(i, 0).checkState() == Qt.Unchecked or first == 1):
                        if (rec == 1):
                            self.mui_plugins1.item(i,0).setCheckState(Qt.Checked)
                            # Desmarcamos las incompatibilidades
                            self.arr = self.mui_plugins1.item(i,6).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                            if self.arr != ['']:
                                for self.dep in self.arr:
                                    self.desmarcar(self.dep,1)
                            # Marcamos las dependencias
                            self.arr = self.mui_plugins1.item(i,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                            if self.arr != ['']:
                                for self.dep in self.arr:
                                    self.marcar(self.dep,1)
                i = i + 1
            i = 0
            while (i < self.mui_plugins.rowCount()):
                if (self.mui_plugins.item(i,10).text() == plug):
                    if (self.mui_plugins.item(i, 0).checkState() == Qt.Unchecked or first == 1):
                        self.mui_plugins.item(i,0).setCheckState(Qt.Checked)
                        if (rec == 1):
                            # Desmarcamos las incompatibilidades
                            self.arr = self.mui_plugins.item(i,6).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                            if self.arr != ['']:
                                for self.dep in self.arr:
                                    self.desmarcar(self.dep,1)
                            # Marcamos las dependencias
                            self.arr = self.mui_plugins.item(i,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                            if self.arr != ['']:
                                for self.dep in self.arr:
                                    self.marcar(self.dep,1)
                i = i + 1

    def desmarcar(self, plug, rec, first = 0):
        i = 0
        if plug !="":
            # Iteramos para la lista de plugins de bulmafact
            while (i < self.mui_plugins1.rowCount()):
                if (self.mui_plugins1.item(i, 0).checkState() == Qt.Checked or first == 1):
                    # Si encontramos al plugin que hay que desmarcar lo desmarcamos.
                    if (plug == self.mui_plugins1.item(i,10).text()) :
                        self.mui_plugins1.item(i,0).setCheckState(Qt.Unchecked)
                    # Si esta marcado el sistema recursivo entonces desmarcamos tambien las dependencias.
                    if (rec == 1):
                        # Marcamos las dependencias
                        self.arr = self.mui_plugins1.item(i,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                        if self.arr != ['']:
                            for self.dep in self.arr:
                                if (self.dep == plug):
                                    self.desmarcar(self.mui_plugins1.item(i,10).text(),1)
                                    self.mui_plugins1.item(i,0).setCheckState(Qt.Unchecked)
                i = i + 1
            i = 0
        # Iteramos para la lista de plugins de bulmaTPV
        while (i < self.mui_plugins.rowCount()):
            if (self.mui_plugins.item(i, 0).checkState() == Qt.Checked or first == 1):
                # Si encontramos al plugin que hay que desmarcar lo desmarcamos.
                if (plug == self.mui_plugins.item(i,10).text()) :
                    self.mui_plugins.item(i,0).setCheckState(Qt.Unchecked)
                # Si esta marcado el sistema recursivo entonces desmarcamos tambien las dependencias.
                if (rec == 1):
                    # Marcamos las dependencias
                    self.arr = self.mui_plugins.item(i,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                    if self.arr != ['']:
                        for self.dep in self.arr:
                            if (self.dep == plug):
                                self.desmarcar(self.mui_plugins.item(i,10).text(),1)
                                self.mui_plugins.item(i,0).setCheckState(Qt.Unchecked)
            i = i + 1

    def on_mui_chosefile_pressed(self):
        self.fileName = QtGui.QFileDialog.getOpenFileName(self, "Open File", "~", "Images (*.jpg)")
        self.mui_textfile.setText(self.fileName)
        #Comprobamos que exista la imagen y si es asi la presentamos.
        if (self.fileName):
            self.pixmap = QtGui.QPixmap(self.fileName)
            self.mui_img.setPixmap(self.pixmap)

    def on_mui_plugins_cellPressed(self, row, col):
        self.estado = self.mui_plugins.item(row,0).checkState()
        # Escribimos la descripcion
        self.mui_descripcion.setText(self.mui_plugins.item(row,1).text() + "<b>" + self.mui_plugins.item(row,10).text() + "</b><br>"+ self.mui_plugins.item(row,3).text() + QtGui.QApplication.translate("Facturacion","<br><b>Categorias:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(row,8).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Dependencias:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(row,5).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Incompatibilidades:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(row,6).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Parches SQL:</b>", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(row,4).text() + "<br>" + self.mui_plugins.item(row,9).text() + QtGui.QApplication.translate("Facturacion","<br><b>Informes:</b><br>", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(row,11).text())

    def on_mui_plugins_cellClicked(self, row, col):
        if (self.semaforo == 1):
            if (self.estado == None):
                self.estado = not(self.mui_plugins.item(row,0).checkState())
            if (self.estado != self.mui_plugins.item(row,0).checkState()):
                # Comprobamos que esta marcado el checkbox de la fila donde hemos clicado:
                if (self.mui_plugins.item(row, 0).checkState() == Qt.Unchecked):
                # Comprobamos que esta marcado el checkbox de la fila donde hemos clicado:
                    self.desmarcar(self.mui_plugins.item(row,10).text(),1,1)
                if (self.mui_plugins.item(row, 0).checkState() == Qt.Checked):
                    # Desmarcamos las incompatibilidades
                    self.arr = self.mui_plugins.item(row,6).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                    if self.arr != ['']:
                        Yes = 'Si'
                        No = 'No'
                        message = QtGui.QMessageBox(self)
                        message.setText(QtGui.QApplication.translate("Facturacion",'El plugin <b>', None, QtGui.QApplication.UnicodeUTF8) +str(self.mui_plugins.item(row,10).text() + QtGui.QApplication.translate("Facturacion","</b> tiene incompatibilidades. Quieres desinstalarlas?", None, QtGui.QApplication.UnicodeUTF8)))
                        message.setWindowTitle(QtGui.QApplication.translate("Facturacion",'Atencion!', None, QtGui.QApplication.UnicodeUTF8))
                        message.setIcon(QtGui.QMessageBox.Warning)
                        message.addButton(Yes, QtGui.QMessageBox.AcceptRole)
                        message.addButton(No, QtGui.QMessageBox.RejectRole)
                        message.exec_()
                        respuesta = message.clickedButton().text()
                        if respuesta == Yes:
                            for self.dep in self.arr:
                                self.desmarcar(self.dep,1,1)
                    # Marcamos las dependencias
                    self.arr = self.mui_plugins.item(row,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                    if self.arr != ['']:
                        Yes = 'Si'
                        No = 'No'
                        message = QtGui.QMessageBox(self)
                        message.setText(QtGui.QApplication.translate("Facturacion",'El plugin <b>', None, QtGui.QApplication.UnicodeUTF8) +str(self.mui_plugins.item(row,10).text())+ QtGui.QApplication.translate("Facturacion","</b> tiene dependencias. Quieres instalarlas?", None, QtGui.QApplication.UnicodeUTF8))
                        message.setWindowTitle('Atencion!')
                        message.setIcon(QtGui.QMessageBox.Warning)
                        message.addButton(Yes, QtGui.QMessageBox.AcceptRole)
                        message.addButton(No, QtGui.QMessageBox.RejectRole)
                        message.exec_()
                        respuesta = message.clickedButton().text()
                        if respuesta == Yes:
                            for self.dep in self.arr:
                                self.marcar(self.dep,1,1)


    def on_mui_seltodos_released(self):
        Yes = 'Si'
        No = 'No'
        message = QtGui.QMessageBox(self)
        message.setText(QtGui.QApplication.translate("Facturacion",'Instalar todos los plugins visibles', None, QtGui.QApplication.UnicodeUTF8) )
        message.setWindowTitle('Atencion!')
        message.setIcon(QtGui.QMessageBox.Warning)
        message.addButton(Yes, QtGui.QMessageBox.AcceptRole)
        message.addButton(No, QtGui.QMessageBox.RejectRole)
        message.exec_()
        respuesta = message.clickedButton().text()
        if respuesta == Yes:
            i = 0
            # Iteramos para la lista de plugins de bulmafact
            while (i < self.mui_plugins1.rowCount()):
                if (not (self.mui_plugins1.isRowHidden(i))):
                    self.marcar(self.mui_plugins1.item(i,10).text(),1,1)
                i = i + 1

            i = 0
            # Iteramos para la lista de plugins de bulmafact
            while (i < self.mui_plugins.rowCount()):
                if (not self.mui_plugins.isRowHidden(i)):
                    self.marcar(self.mui_plugins.item(i,10).text(),1,1)
                i = i + 1


    def on_mui_plugins1_cellPressed(self, row, col):
        self.estado = self.mui_plugins1.item(row,0).checkState()
        # Escribimos la descripcion
        self.mui_descripcion.setText(self.mui_plugins1.item(row,1).text() + "<b>" + self.mui_plugins1.item(row,10).text() + "</b><br>"+ self.mui_plugins1.item(row,3).text() + QtGui.QApplication.translate("Facturacion","<br><b>Categorias:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(row,8).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Dependencias:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(row,5).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Incompatibilidades:</b> ", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(row,6).text() + QtGui.QApplication.translate("Facturacion","<br><br><b>Parches SQL:</b>", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(row,4).text() + "<br>" + self.mui_plugins1.item(row,9).text() + QtGui.QApplication.translate("Facturacion","<br><b>Informes:</b><br>", None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(row,11).text())

    def on_mui_plugins1_cellClicked(self, row, col):
        if (self.semaforo == 1):
            if (self.estado == None):
                self.estado = not(self.mui_plugins1.item(row,0).checkState())
            if (self.estado != self.mui_plugins1.item(row,0).checkState()):
                if (self.mui_plugins1.item(row, 0).checkState() == Qt.Unchecked):
                # Comprobamos que esta marcado el checkbox de la fila donde hemos clicado:
                    self.desmarcar(self.mui_plugins1.item(row,10).text(),1,1)
                # Comprobamos que esta marcado el checkbox de la fila donde hemos clicado:
                if (self.mui_plugins1.item(row, 0).checkState() == Qt.Checked):
                    # Desmarcamos las incompatibilidades
                    self.arr = self.mui_plugins1.item(row,6).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                    if self.arr != ['']:
                        Yes = 'Si'
                        No = 'No'
                        message = QtGui.QMessageBox(self)
                        message.setText(QtGui.QApplication.translate("Facturacion",'El plugin <b>', None, QtGui.QApplication.UnicodeUTF8) +str(self.mui_plugins1.item(row,10).text() + QtGui.QApplication.translate("Facturacion","</b> tiene incompatibilidades. Quieres desinstalarlas?", None, QtGui.QApplication.UnicodeUTF8)))
                        message.setWindowTitle('Atencion!')
                        message.setIcon(QtGui.QMessageBox.Warning)
                        message.addButton(Yes, QtGui.QMessageBox.AcceptRole)
                        message.addButton(No, QtGui.QMessageBox.RejectRole)
                        message.exec_()
                        respuesta = message.clickedButton().text()
                        if respuesta == Yes:
                            for self.dep in self.arr:
                                self.desmarcar(self.dep,1,1)
                    # Marcamos las dependencias
                    self.arr = self.mui_plugins1.item(row,5).text().replace(' ;',';').replace('; ',';').split(QString(";"))
                    if self.arr != ['']:
                        Yes = 'Si'
                        No = 'No'
                        message = QtGui.QMessageBox(self)
                        message.setText(QtGui.QApplication.translate("Facturacion",'El plugin <b>', None, QtGui.QApplication.UnicodeUTF8) +str(self.pluginsbulmatpv[row][1] + QtGui.QApplication.translate("Facturacion","</b> tiene dependencias. Quieres instalarlas?", None, QtGui.QApplication.UnicodeUTF8)))
                        message.setWindowTitle(QtGui.QApplication.translate("Facturacion",'Atencion!', None, QtGui.QApplication.UnicodeUTF8))
                        message.setIcon(QtGui.QMessageBox.Warning)
                        message.addButton(Yes, QtGui.QMessageBox.AcceptRole)
                        message.addButton(No, QtGui.QMessageBox.RejectRole)
                        message.exec_()
                        respuesta = message.clickedButton().text()
                        if respuesta == Yes:
                            for self.dep in self.arr:
                                self.marcar(self.dep,1,1)



    def actualizarPlugins(self):
        self.writecommand(QtGui.QApplication.translate("Facturacion",'ACTUALIZANDO PLUGINS', None, QtGui.QApplication.UnicodeUTF8))

        #Creamos la bara de progreso
        self.progress = QtGui.QProgressBar(self)
        self.progress.setGeometry(self.width() / 2 -100, self.height() /2 -10, 200, 40)
        self.progress.setRange(0, 4000)
        self.progress.show()

        # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
        self.x = 1
        while (self.x < 1000) :
            # Iteramos sobre la lista de plugins disponibles en bulmafact
            self.i = 0
            while (self.i < self.mui_plugins.rowCount()):
                # Si el plugin tiene el orden adecuado lo consideramos.
                if (self.mui_plugins.item(self.i,7) <> None and str(self.mui_plugins.item(self.i,7).text()) == str(self.x) ):
                    self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
                    if (self.mui_plugins.item(self.i, 0).checkState() == Qt.Checked):
                        self.writecommand(QtGui.QApplication.translate("Facturacion",'Actualizando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
                        self.writecommand('============ \n ' )
                        # Si hay parche de actualizacion lo aplicamos
                        # En realidad deberia comprobarse si hay archivo para aplicarlo o no en
                        # lugar de comprobar la longitud del archivo.
                        if (QFile.exists(plugins.pathdbplugins + self.mui_plugins.item(self.i,4).text()) and self.mui_plugins.item(self.i,4).text().size() > 3 ):
                            self.command = functions.psql + ' -t -f  ' + functions.multios().correctFileName(plugins.pathdbplugins + self.mui_plugins.item(self.i,4).text()) +' '+ self.database + functions.end_sql
                            self.writecommand(self.command)
                            self.process.start(self.command)
                            self.process.waitForFinished(-1)
                            self.writecommand(self.process.readAllStandardOutput())
                            # Tambien tenemos que hacer las comprobaciones de idioma.
                            locale = QtCore.QLocale()
                            self.filename = plugins.pathdbplugins + self.mui_plugins.item(self.i,4).text().left(self.mui_plugins.item(self.i,4).text().size()-4) + "_" + locale.name().left(5) + ".sql"
                            if (QFile.exists(self.filename)):
                                self.command = functions.psql + ' -t -f ' + functions.multios().correctFileName(self.filename) + ' ' + self.database + functions.end_sql
                                self.writecommand(self.command)
                                self.process.start(self.command)
                                self.process.waitForFinished(-1)
                                self.writecommand(self.process.readAllStandardOutput())
                self.i = self.i +1
            self.x = self.x +1
            self.progress.setValue(self.progress.value() + 1)


        # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
        self.x = 1000
        while (self.x >= 1) :
            # Iteramos sobre la lista de plugins disponibles en bulmafact
            self.i = 0
            while (self.i < self.mui_plugins.rowCount()):
                # Si el plugin tiene el orden adecuado lo consideramos.
                if (self.mui_plugins.item(self.i,7) <> None and str(self.mui_plugins.item(self.i,7).text()) == str(self.x) ):
                    self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins.item(self.i,0).text())
                    if (self.mui_plugins.item(self.i, 0).checkState() <> Qt.Checked):
                        # Si no esta chequeado hacemos un borrado del plugin
                        if (QFile.exists(plugins.pathdbplugins + self.mui_plugins.item(self.i,9).text()) and self.mui_plugins.item(self.i,9).text().size() > 3):
                            # Aplicamos el parche  de borrado.
                            self.command = functions.psql + ' -t -f  ' + functions.multios().correctFileName(plugins.pathdbplugins + self.mui_plugins.item(self.i,9).text()) +' '+ self.database + functions.end_sql
                            self.writecommand(self.command)
                            self.process.start(self.command)
                            self.process.waitForFinished(-1)
                            self.writecommand(self.process.readAllStandardOutput())
                self.i = self.i +1
            self.x = self.x - 1
            self.progress.setValue(self.progress.value() + 1)

        if (self.mui_soporteTPV.isChecked()):
            # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
            self.x = 1
            while (self.x < 1000) :
                # Iteramos sobre la lista de plugins disponibles en bulmafact
                self.i = 0
                while (self.i < self.mui_plugins1.rowCount()):
                    # Si el plugin tiene el orden adecuado lo consideramos.
                    if (self.mui_plugins1.item(self.i,7) <> None and str(self.mui_plugins1.item(self.i,7).text()) == str(self.x) ):
                        self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                        if (self.mui_plugins1.item(self.i, 0).checkState() == Qt.Checked):
                            if (QFile.exists(plugins.pathdbplugins + self.mui_plugins1.item(self.i,4).text()) and self.mui_plugins1.item(self.i,4).text().size() > 4):
                                self.writecommand(QtGui.QApplication.translate("Facturacion",'Actualizando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                                self.command = functions.psql + ' -t -f  ' + functions.multios().correctFileName(plugins.pathdbplugins + self.mui_plugins1.item(self.i,4).text()) +' '+ self.database + functions.end_sql
                                self.writecommand(self.command)
                                self.process.start(self.command)
                                self.process.waitForFinished(-1)
                                self.writecommand(self.process.readAllStandardOutput())
                                # Tambien tenemos que hacer las comprobaciones de idioma.
                                locale = QtCore.QLocale()
                                self.filename = plugins.pathdbplugins + self.mui_plugins1.item(self.i,4).text().left(self.mui_plugins1.item(self.i,4).text().size() -4) + "_" + locale.name().left(5) + ".sql"
                                if (QFile.exists(self.filename)):
                                    self.command = functions.psql + ' -t -f ' + functions.multios().correctFileName(self.filename) + ' ' + self.database + functions.end_sql
                                    self.writecommand(self.command)
                                    self.process.start(self.command)
                                    self.process.waitForFinished(-1)
                                    self.writecommand(self.process.readAllStandardOutput())
                    self.i = self.i + 1
                self.x = self.x + 1
                self.progress.setValue(self.progress.value() + 1)


            # Como los plugins van por orden iteramos sobre el orden para arreglarlo.
            self.x = 1000
            while (self.x >= 1) :
                # Iteramos sobre la lista de plugins disponibles en bulmafact
                self.i = 0
                while (self.i < self.mui_plugins1.rowCount()):
                    # Si el plugin tiene el orden adecuado lo consideramos.
                    if (self.mui_plugins1.item(self.i,7) <> None and str(self.mui_plugins1.item(self.i,7).text()) == str(self.x) ):
                        self.writecommand(QtGui.QApplication.translate("Facturacion",'Tratando ', None, QtGui.QApplication.UnicodeUTF8) + self.mui_plugins1.item(self.i,0).text())
                        if (self.mui_plugins1.item(self.i, 0).checkState() <> Qt.Checked):
                            # Si no esta chequeado hacemos un borrado del plugin
                            if (QFile.exists(plugins.pathdbplugins + self.mui_plugins1.item(self.i,9).text()) and self.mui_plugins1.item(self.i,9).text().size() > 3):
                                # Aplicamos el parche  de borrado.
                                self.command = functions.psql + ' -t -f  ' + functions.multios().correctFileName(plugins.pathdbplugins + self.mui_plugins1.item(self.i,9).text()) +' '+ self.database + functions.end_sql
                                self.writecommand(self.command)
                                self.process.start(self.command)
                                self.process.waitForFinished(-1)
                                self.writecommand(self.process.readAllStandardOutput())
                    self.i = self.i + 1
                self.x = self.x - 1
                self.progress.setValue(self.progress.value() + 1)



        self.progress.hide()

    def buscaPlugins(self):
        self.writecommand(QtGui.QApplication.translate("Facturacion","Buscando Pluggins", None, QtGui.QApplication.UnicodeUTF8))

        #Conectamos con la base de datos
        if (self.database <> None):
            self.conectar(self.database)

        #Creamos la bara de progreso
        self.progress = QtGui.QProgressBar()
        self.progress.setGeometry(self.width() / 2 -100, self.height() /2 -10, 200, 40)
        self.progress.setRange(0, len(self.pluginsbulmafact) + len(self.pluginsbulmatpv))
        self.progress.show()
        self.semaforo = 0
        self.mui_plugins.setRowCount(len(self.pluginsbulmafact))
        self.i = 0
        while (self.i < len(self.pluginsbulmafact)):
            self.versioninst = self.buscaPluginInstalado(self.pluginsbulmafact[self.i][3], self.pluginsbulmafact[self.i][1])
            self.check = QTableWidgetItem(QtGui.QApplication.translate("MainWindow", self.pluginsbulmafact[self.i][0], None, QtGui.QApplication.UnicodeUTF8))
            self.check.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
            self.check.setCheckState(Qt.Unchecked)
            if (self.versioninst != ''):
                self.check.setCheckState(Qt.Checked)
            self.mui_plugins.setItem(self.i, 0, self.check)
            self.mui_plugins.setItem(self.i, 2, QTableWidgetItem(self.versioninst))
            self.mui_plugins.setItem(self.i , 1 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][2], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 3 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][3], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 4 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][4], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 5 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][5], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 6 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][6], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 7 , QTableWidgetItem(QtCore.QString.number(self.pluginsbulmafact[self.i][7])))
            self.mui_plugins.setItem(self.i , 8 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][8], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 9 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][9], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 10 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][1], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins.setItem(self.i , 11 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][10], None, QtGui.QApplication.UnicodeUTF8)))

            self.mui_plugins.setItem(self.i , 12 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmafact[self.i][11], None, QtGui.QApplication.UnicodeUTF8)))
#
#        self.mui_plugins.setRowHeight(self.i, 50)
            self.i = self.i + 1
            self.progress.setValue(self.progress.value() + 1)


        self.mui_plugins1.setRowCount(len(self.pluginsbulmatpv))
        self.i = 0
        while (self.i < len(self.pluginsbulmatpv)):
            self.versioninst = self.buscaPluginInstalado(self.pluginsbulmatpv[self.i][3], self.pluginsbulmatpv[self.i][1])
            self.check = QTableWidgetItem(QtGui.QApplication.translate("MainWindow", self.pluginsbulmatpv[self.i][0], None, QtGui.QApplication.UnicodeUTF8))
            self.check.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
            self.check.setCheckState(Qt.Unchecked)
            if (self.versioninst != ''):
                self.check.setCheckState(Qt.Checked)
            self.mui_plugins1.setItem(self.i, 0, self.check)
            self.mui_plugins1.setItem(self.i, 2, QTableWidgetItem(self.versioninst))
            self.mui_plugins1.setItem(self.i , 1 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][2], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 3 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][3], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 4 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][4], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 5 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][5], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 6 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][6], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 7 , QTableWidgetItem(QtCore.QString.number(self.pluginsbulmatpv[self.i][7])))
            self.mui_plugins1.setItem(self.i , 8 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][8], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 9 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][9], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 10 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][1], None, QtGui.QApplication.UnicodeUTF8)))
            self.mui_plugins1.setItem(self.i , 11 , QTableWidgetItem(QtGui.QApplication.translate("MainWindow",self.pluginsbulmatpv[self.i][10], None, QtGui.QApplication.UnicodeUTF8)))
            self.i = self.i + 1
            self.progress.setValue(self.progress.value() + 1)

        self.semaforo = 1
        self.progress.hide()

        #Desconectamos la base de datos
        if (self.database <> None):
            self.desconectar()

    def buscaPluginInstalado(self, plugin, libreria):

        # Si la base de datos no existe no hace falta comprobar nada.
        if (self.database == None):
            return ''

        self.version = self.executeone('SELECT valor FROM configuracion WHERE nombre = \'' + plugin +'\'')

        if (self.version <> None):
            return self.version[0]

        self.version = ''
        if (libreria == ''):
            return ''

        # Hacemos una busqueda grep de la libreria en el archivo de configuracion.
        # Esta busqueda no es precisa ya que el archivo podria estar comentado, pero es lo mejor que hay por el momento.
        self.process1 = QtCore.QProcess()
        self.mfile = QFile(plugins.configfiles + 'bulmafact_' + self.database + '.conf')
        if (self.mfile.exists()):
            if os.name == 'posix':
                if functions.multios().grep(libreria,str(plugins.configfiles + 'bulmafact_' + self.database + '.conf')) != None:
                    self.version = 'Sin Determinar'
            else:
                if functions.multios().grep(libreria.replace(".so",".dll"),str(plugins.configfiles + 'bulmafact_' + self.database + '.conf')) != None:
                    self.version = 'Sin Determinar'


        # Hacemos una busqueda grep de la libreria en el archivo de configuracion.
        # Esta busqueda no es precisa ya que el archivo podria estar comentado, pero es lo mejor que hay por el momento.
        if (self.version == ''):
            self.mfile = QFile(plugins.configfiles + 'bulmatpv_' + self.database + '.conf')
            if (self.mfile.exists()):
                if os.name == 'posix':
                    if functions.multios().grep(libreria,str(plugins.configfiles + 'bulmatpv_' + self.database + '.conf')) != None:
                        self.version = 'Sin Determinar'
                else:
                    if functions.multios().grep(libreria.replace(".so",".dll"),str(plugins.configfiles + 'bulmatpv_' + self.database + '.conf')) != None:
                        self.version = 'Sin Determinar'

        if (self.version != ''):
            self.version = 'Sin Determinar'
        return QString(self.version)

    def buscaPlugins1(self):
        self.plugins = self.execQuery('SELECT nombre, valor FROM configuracion WHERE nombre LIKE \'DBRev-%\'')
        self.writecommand(self.plugins)
        self.arrplugins = self.plugins.split(QString("\n"))
        self.mui_plugins.setRowCount(self.arrplugins.count() -3)
        self.i = 0
        while (self.i < self.arrplugins.count() ):
            self.writecommand(self.arrplugins[self.i])
            self.valores = self.arrplugins[self.i].split(QString("|"))
            if (self.valores.count() >= 2):
                self.mui_plugins.setItem(self.i-1 , 1 , QTableWidgetItem(self.valores[1].replace('\n', '')))
                self.mui_plugins.setItem(self.i-1 , 0 , QTableWidgetItem(self.valores[0].replace('\n', '')))
            self.i = self.i + 1

    def actualizarDatabase(self):
        self.writecommand(QtGui.QApplication.translate("Facturacion",'ACTUALIZANDO BASE DE DATOS', None, QtGui.QApplication.UnicodeUTF8))
        # Desactivamos el mostrado de errores ya que si el parche no es el adecuado entonces produce errores que no son tales
        self.mostrarErrores = "FALSE"
        # Aplicamos el parche de bulmatpv
        if (self.mui_soporteTPV.isChecked()):
            #self.command = functions.as_postgres + 'psql ' + self.database + ' < '+ plugins.pathdbbulmatpv+'bulmatpv_schema.sql"' + functions.end_sql
            self.command = functions.psql + ' -t -f ' + functions.multios().correctFileName(plugins.pathdbbulmatpv+'bulmatpv_schema.sql') + ' ' + self.database + functions.end_sql
            self.writecommand(self.command)
            self.process.start(self.command)
            self.process.waitForFinished(-1)


        self.revisiones = ["revf-0.5.9.sql","revf-0.9.1.sql", "revf-0.9.3.sql", "revf-0.10.sql", "revf-0.11.sql", "revf-0.12.sql", "revf-0.13.sql", "revf-0.14.sql", "revf-0.15.sql", "revf-1.5.sql", "revf-1.6.sql"]
        #Parcheamos todo lo que hay que parchear
        for self.parche in self.revisiones:
            self.command = functions.psql + ' -t -f  ' + functions.multios().correctFileName(plugins.pathdbparches + self.parche) + ' ' + self.database + functions.end_sql
            self.writecommand(self.command)
            self.process.start(self.command)
            self.process.waitForFinished(-1)
            self.writecommand(self.process.readAllStandardOutput())
        # Reactivamos el mostrado de errores
        self.mostrarErrores = "TRUE"


    def on_mui_categoria_currentIndexChanged(self, index):
        self.presentar()


    def on_mui_vertodos_stateChanged(self, status):
        self.presentar()

    def mostrarTodo(self):
        status = self.mui_vertodos.checkState()

        # Hacemos todas las lineas visibles para luego ocultarlas.
        self.i = 0
        while (self.i < self.mui_plugins1.rowCount()):
            self.mui_plugins1.showRow(self.i)
            self.i = self.i + 1

        self.i = 0
        while (self.i < self.mui_plugins.rowCount()):
            self.mui_plugins.showRow(self.i)
            self.i = self.i + 1

    def presentar(self):
        status = self.mui_vertodos.checkState()

        self.mostrarTodo();

        if (status == 2):
            # Establezco la tabla de bulmafact
            self.i = 0
            while (self.i < self.mui_plugins.rowCount()):
                if (self.mui_plugins.item(self.i, 0).checkState() != Qt.Checked ):
                    self.mui_plugins.hideRow(self.i)
                self.i = self.i + 1

            # Establezco la tabla de bulmatpv
            self.i = 0
            while (self.i < self.mui_plugins1.rowCount()):
                if (self.mui_plugins1.item(self.i, 0).checkState() != Qt.Checked ):
                    self.mui_plugins1.hideRow(self.i)
                self.i = self.i + 1
        # Si la categoria no es la ultima entonces ocultamos. Si es la ultima es que hay que mostrarlo todo.
        if (self.mui_categoria.currentIndex() < self.mui_categoria.count()-1):
            # Vamos a trabajar con el combo Box
            cat = self.mui_categoria.currentText()
            self.i = 0
            while (self.i < self.mui_plugins.rowCount()):
                if self.mui_plugins.item(self.i,8) <> None:
                    text = QString(self.mui_plugins.item(self.i,8).text())
                    a = text.contains(cat)
                    if (not a):
                        self.mui_plugins.hideRow(self.i)
                self.i = self.i +1

            # Vamos a trabajar con el combo Box
            self.i = 0
            while (self.i < self.mui_plugins1.rowCount()):
                if self.mui_plugins1.item(self.i,8) <> None:
                    text = QString(self.mui_plugins1.item(self.i,8).text())
                    a = text.contains(cat)
                    if (not a):
                        self.mui_plugins1.hideRow(self.i)
                self.i = self.i +1
